# Ensure the .ansible/tmp directory exists with proper permissions
- name: Ensure the .ansible/tmp directory exists
  file:
    path: "/home/{{ kube_user }}/.ansible/tmp"
    state: directory
    mode: '0755'
    owner: "{{ kube_user }}"
    group: "{{ kube_user }}"

# Check if Kubernetes is already initialized
- name: Check if Kubernetes is already initialized
  stat:
    path: /etc/kubernetes/admin.conf
  register: ansible_stat_init

# Create an empty kubeadm config file
- name: Create an empty kubeadm config
  copy:
    content: ''
    dest: /etc/kubernetes/kubeadm-config.yaml
    force: no
  when: "'masters' in group_names"

# Configure container runtime settings
- name: Configure container runtime
  blockinfile:
    path: /etc/kubernetes/kubeadm-config.yaml
    block: |
      kind: ClusterConfiguration
      apiVersion: kubeadm.k8s.io/v1beta3
      networking:
        podSubnet: "{{ pod_subnet }}"
      ---
      kind: KubeletConfiguration
      apiVersion: kubelet.config.k8s.io/v1beta1
      runtimeRequestTimeout: "15m"
      cgroupDriver: "systemd"
      systemReserved:
        cpu: 100m
        memory: 350M
      kubeReserved:
        cpu: 100m
        memory: 50M
      enforceNodeAllocatable:
        - pods
  when: "'masters' in group_names"

# Ensure log directory exists
- name: Ensure log directory exists
  file:
    path: "/home/{{ kube_user }}/{{ inventory_hostname }}"
    state: directory
    mode: '0755'
    owner: "{{ kube_user }}"
    group: "{{ kube_user }}"
  when: "'masters' in group_names"

# Initialize the Kubernetes cluster
- name: Initialize the Kubernetes cluster
  shell: >-
    kubeadm init --config /etc/kubernetes/kubeadm-config.yaml |
    tee -a /home/{{ kube_user }}/{{ inventory_hostname }}/cluster_initialized.log
  args:
    chdir: "/home/{{ kube_user }}"
  become: true
  register: kubeadm_init_result
  failed_when: kubeadm_init_result.rc != 0 and "already initialized" not in kubeadm_init_result.stderr
  retries: 3
  delay: 30
  until: kubeadm_init_result.rc == 0
  when: "'masters' in group_names and not ansible_stat_init.stat.exists"

# Create .kube directory
- name: Create .kube directory
  become_user: "{{ kube_user }}"
  file:
    path: "/home/{{ kube_user }}/.kube"
    state: directory
    mode: '0700'

# Copy admin.conf to user's kube config
- name: Copy admin.conf to user's kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ kube_user }}/.kube/config"
    owner: "{{ kube_user }}"
    mode: '0700'
    remote_src: yes
  when: "'masters' in group_names"

# Install Flannel network
- name: Install Flannel pod network
  become_user: "{{ kube_user }}"
  shell: >-
    kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
  args:
    chdir: "/home/{{ kube_user }}"
  when: "'masters' in group_names"

# Fetch admin.conf from master
- name: Fetch admin.conf from master
  fetch:
    src: /etc/kubernetes/admin.conf
    dest: "/tmp/admin.conf"
    flat: yes
  when: "'masters' in group_names"

# Distribute admin.conf to worker and proxy nodes
- name: Copy admin.conf to worker and proxy nodes
  copy:
    src: "/tmp/admin.conf"
    dest: "/home/{{ kube_user }}/.kube/config"
    owner: "{{ kube_user }}"
    mode: '0700'
  when: "'workers' in group_names or 'proxies' in group_names"

# Set KUBECONFIG in .bashrc for user {{ kube_user }}
- name: Set KUBECONFIG in .bashrc for user {{ kube_user }}
  lineinfile:
    path: "/home/{{ kube_user }}/.bashrc"
    line: "export KUBECONFIG=/home/{{ kube_user }}/.kube/config"
    create: yes

# Apply KUBECONFIG for user {{ kube_user }}
- name: Apply KUBECONFIG for user {{ kube_user }}
  shell: "source /home/{{ kube_user }}/.bashrc"
  args:
    executable: /bin/bash

# Set KUBECONFIG in .bashrc for root
- name: Set KUBECONFIG in .bashrc for root
  lineinfile:
    path: "/root/.bashrc"
    line: "export KUBECONFIG=/etc/kubernetes/admin.conf"
    create: yes

# Apply KUBECONFIG for root user
- name: Apply KUBECONFIG for root user
  shell: ". /root/.bashrc"
  args:
    executable: /bin/bash

